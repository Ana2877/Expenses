Technical Frontend:

- enhance husky -> create a commit pattern maybe
- check if it is possible to use a visual regression test (lambda test?)
- pipeline
- create storybook for other components
- create a shared context for storybook so we don't have to call all the providers and dependencies before the component. Ex: Routes.
- create integration tests in App.test.ts to test the routes when clicking in the drawer items
- create login component
- create jest tests for login component
- create jest tests for loginOrSingUp component
- create cypress tests to cover all the functionalities of loginOrSignUp
- Move the fixed schedule to a new route, moving the folders as well. With the addSchedule. Is is a admin page.

Technical Backend ->

- Swagger
- Authentication
- Check if the user is admin, to admin only APIs

General ->

- Update readme with storybook info
- Update readme with husky info
- Put everything on AWS
- Dockeriza tudo

System ->

- Create logs
- Make the api request more robust with more specific errors and handles
- User Profile -> What is the plan the user is currently assigned
- Schedule -> User can schedule a free time
- Available Plans -> User can visualize its plan and the others that exist, but can't update. Only the admin.
- Create a history page for the admin, where he can check everything the users did
